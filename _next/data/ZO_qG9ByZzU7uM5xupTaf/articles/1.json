{"pageProps":{"posts":[{"id":"create-a-symlink-for-laravel-storage-inside-a-docker-container","title":"Creating a Symlink for Laravel Storage Inside a Docker Container","description":"Explore how to resolve Laravel storage symlink challenges within a Docker container using a specific command","categories":["Docker","Laravel"],"tags":["DockerizedLaravel"],"content":"\n## Introduction\nRunning a Laravel application inside a Docker container often presents challenges with storage symlinks. Even after executing the typical php artisan storage:link command within the container, accessing files from the Laravel application through the frontend in the host machine's browser can be problematic. This article delves into a specific Docker command that effectively resolves this issue, ensuring that the files become accessible when accessed from the host machine's frontend.\n\n## The Command\nThe following Docker command addresses symlink concerns within a Laravel application running in a Docker container:\n\n```bash\ndocker exec -it APP_CONTAINER_NAME sh -c \"cd public && ln -s ../storage/app/public storage\"\n```\n\nBreaking down the command:\n\n`docker exec -it APP_CONTAINER_NAME`: Executes a command inside a running Docker container interactively.\n`sh -c \"cd public && ln -s ../storage/app/public storage\"`: Changes the directory to public within the container and creates a symbolic link (ln -s) to the `storage/app/public` directory.\n\n## Context and Usage\nIf you've faced issues where files linked using php artisan storage:link inside a Laravel Docker container are not accessible when accessed from the host machine's frontend, this command provides a solution. It ensures that the public/storage directory within the Laravel application correctly points to the storage location, resolving challenges related to frontend file accessibility.\n\nHere's a brief overview of the provided command:\n\n```bash\ndocker exec -it APP_CONTAINER_NAME sh -c \"cd public && ln -s ../storage/app/public storage\"\n```\nAPP_CONTAINER_NAME: Replace this with the actual name or ID of your Laravel application's Docker container.\n\nExecuting this command helps establish the necessary symlink, enabling smooth communication between the Laravel application and the storage folder, ultimately resolving challenges with frontend file accessibility.\n","author":{"name":"Raphael Batagini"},"publishDate":"Sun Dec 03 2023"},{"id":"importing-sql-dump-into-docker-container-using-wsl","title":"Importing a SQL Dump Into Docker Container Using WSL","description":"Import a SQL dump from the WSL host machine into a docker container","categories":["Docker","WSL"],"tags":["beginner","utility"],"content":"\n## Introduction\nWhen working with Docker containers and WSL (Windows Subsystem for Linux), it's common to encounter scenarios where you need to import a SQL dump into a database running inside a Docker container. This process is essential for tasks such as setting up development environments or migrating databases.\n\n## The Command\nTo achieve this, you can use the docker exec command along with the MySQL client inside the Docker container. The command has a generic structure, making it adaptable to various scenarios:\n\n```bash\ndocker exec -i your_container_name_or_id mysql -u your_username -pyour_password your_database_name < /path/to/your/sql_dump.sql\n```\n\nReplace the placeholders with your specific details:\n\nyour_container_name_or_id: The name or ID of your Docker container.\nyour_username: Your MySQL database username.\nyour_password: Your MySQL database password.\nyour_database_name: The name of the database you want to import into.\n/path/to/your/sql_dump.sql: The path to the SQL dump file on your WSL host machine.\n\n## Understanding the Filepath in WSL\nIn the provided example command below:\n\n```bash\ndocker exec -i my-app-db-1 mysql -u user -ppassword my_app_schema < /mnt/e/Downloads/db-dump.sql\n```\n\nThe file path `/mnt/e/Downloads/db-dump.sql` refers to a location on the Windows filesystem accessible from within WSL. In WSL, the filesystem is mounted under the /mnt directory, with each drive having its own subdirectory. In this case, the E: drive is accessible under /mnt/e/.\n\nTherefore, the full Windows path is `E:\\Downloads\\db-dump.sql`, and within WSL, it is represented as `/mnt/e/Downloads/db-dump.sql`. This allows seamless interaction between WSL and Windows, enabling you to access and manipulate files across both environments.\n\n## Conclusion\nIn conclusion, importing a SQL dump into a Docker container using WSL proves to be a straightforward process with the right command structure. Leveraging the flexibility of the docker exec command along with the MySQL client within the Docker container allows for seamless database setup and migration. Understanding the nuances of file paths in WSL ensures accurate referencing of files located on the Windows filesystem. By adapting the provided command to your specific configuration, you can efficiently manage database operations in a Dockerized environment integrated with WSL.\n","author":{"name":"Raphael Batagini"},"publishDate":"Sun Dec 03 2023"},{"id":"introduction-to-javascript-syntax","title":"Introduction to JavaScript Syntax: A Beginner's Guide","description":"Learn the basics of JavaScript syntax with code examples. Understand variables, data types, operators, conditional statements, and loops in JavaScript.","categories":["JavaScript"],"tags":["beginner"],"content":"Welcome to our comprehensive blog post on 'Introduction to JavaScript Syntax'! Whether you're new to coding or looking to refresh your skills, this post is the perfect starting point for learning the fundamental concepts of JavaScript, a versatile programming language used to create dynamic and interactive web content. We'll cover each topic in detail, providing code examples and explanations to help you understand the code behavior better.\n\n## What is JavaScript?\n\nBefore we delve into the code examples, let's gain a clear understanding of JavaScript. Developed by Brendan Eich in 1995, JavaScript is a powerful, high-level, and interpreted programming language. It is widely used in web development to enhance the interactivity of websites, making them more user-friendly and engaging.\n\n## Getting Started - Hello World!\n\nLet's begin with a simple yet essential example to grasp the basic syntax of JavaScript. The traditional \"Hello, World!\" example demonstrates how to output text to the browser's developer console using the 'console.log()' function. This function is frequently used for debugging and providing feedback during development.\n\n```javascript\nconsole.log(\"Hello, World!\");\n```\n\nUpon running this code, the browser's console will display \"Hello, World!\" This demonstrates how JavaScript code can directly interact with the browser environment.\n\n## Variables and Data Types\n\nJavaScript uses variables to store and manipulate data. Unlike statically typed languages, JavaScript is dynamically typed, allowing variables to change data types during runtime. Let's take a closer look at declaring variables and assigning values:\n\n```javascript\nlet name = \"John\";\nlet age = 30;\nlet isNewMember = true;\n```\n\nIn this example, we declared three variables: 'name', 'age', and 'isNewMember'. The 'let' keyword is used to declare variables in JavaScript. 'name' stores a string, 'age' stores a number, and 'isNewMember' stores a boolean value.\n\n## Operators in JavaScript\n\nOperators enable us to perform various operations on variables and values. We'll cover three types of operators: assignment, comparison, and logical operators.\n\n### Assignment Operator\n\nThe assignment operator (=) is used to assign values to variables:\n\n```javascript\nlet x = 10;\nlet y = 5;\n```\n\n### Comparison Operators\n\nComparison operators help compare two values and return a boolean result:\n\n```javascript\nlet isEqual = x === y;           // Is x equal to y?\nlet isNotEqual = x !== y;        // Is x not equal to y?\nlet isGreater = x > y;           // Is x greater than y?\nlet isLess = x < y;              // Is x less than y?\nlet isGreaterOrEqual = x >= y;   // Is x greater than or equal to y?\nlet isLessOrEqual = x <= y;      // Is x less than or equal to y?\n```\n\n### Logical Operators\n\nLogical operators allow combining multiple conditions:\n\n```javascript\nlet isTrue = true;\nlet isFalse = false;\n\nlet resultAND = isTrue && isFalse;   // Logical AND\nlet resultOR = isTrue || isFalse;    // Logical OR\n```\n\n## Control Flow: Conditional Statements\n\nConditional statements enable us to make decisions in our code. By using 'if', 'else if', and 'else', different code blocks can be executed based on specific conditions:\n\n```javascript\nlet score = 75;\n\nif (score >= 90) {\n  console.log(\"Excellent! You got an A.\");\n} else if (score >= 80) {\n  console.log(\"Well done! You got a B.\");\n} else if (score >= 70) {\n  console.log(\"Good job! You got a C.\");\n} else {\n  console.log(\"Keep going! You need to improve.\");\n}\n```\n\nIn this example, depending on the value of 'score', a different message will be displayed, providing feedback to the student.\n\n## Control Flow: Loops\n\nLoops are essential for executing a block of code repeatedly. We'll cover 'for', 'while', and 'do-while' loops.\n\n### for Loop\n\nThe 'for' loop allows iterating over a block of code a specific number of times:\n\n```javascript\nfor (let i = 1; i <= 5; i++) {\n  console.log(i);\n}\n```\n\n### while Loop\n\nThe 'while' loop executes a block of code while a specified condition is true:\n\n```javascript\nlet i = 1;\n\nwhile (i <= 5) {\n  console.log(i);\n  i++;\n}\n```\n\n### do-while Loop\n\nThe 'do-while' loop ensures that the code block executes at least once, even if the condition is initially false:\n\n```javascript\nlet j = 1;\n\ndo {\n  console.log(j);\n  j++;\n} while (j <= 5);\n```\n\n## Conclusion\n\nCongratulations! You've now learned about variables, data types, assignment, comparison, and logical operators, as well as conditional statements and loops in JavaScript. These are the building blocks of any JavaScript program, and understanding them is crucial for becoming proficient in web development.\n\nWe hope you found this blog post helpful. If you have any questions or need further assistance, feel free to leave a comment below. Happy coding!\n","author":{"name":"Raphael Batagini"},"publishDate":"Wed Jul 12 2023"}],"currentPage":1,"totalPages":1,"totalPosts":3},"__N_SSG":true}